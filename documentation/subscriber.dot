digraph {
  subgraph workers {
    label = "Workers";
    node [style=filled, color=blue, fontcolor=white];

    // This is a list of all of the workers in the subscriber SDK
    ChangeResolution;
    Disconnect;
    ProcessInitialPresenceMessages;
    StartConnection;
    StopConnection;
    SubscribeForPresenceMessages;
    SubscribeToChannel;
    UpdateChannelConnectionState;
    UpdateConnectionState;
    UpdatePublisherPresence;
  }

  subgraph ably_wrapper {
    label = "Ably wrapper";
    node [style=filled, color=yellow];

    close;
    connect;
    disconnect;
    enterChannelPresence;
    getCurrentPresence;
    startConnection;
    subscribeForPresenceMessages;
    updatePresenceData;
    subscribeForAblyStateChange;
    subscribeForChannelStateChange;
    ably_subscribeForEnhancedEvents [label = "subscribeForEnhancedEvents"];
    ably_subscribeForRawEvents [label = "subscribeForRawEvents"];
  }

  subgraph ably_wrapper_listeners {
    node [label="listener"]

    /* This is a list of all of the listeners passed to the Ably wrapper (except for the ones where the listener does not trigger a behaviour that this graph is interested in.)
     *
     * These nodes are given names like listener_<caller_name>__<called_name>.
     */

    listener_SubscribeForPresenceMessages__subscribeForPresenceMessages;
    listener_CoreSubscriber_init__subscribeForAblyStateChange;
    listener_subscribeForChannelState__subscribeForChannelStateChange;
  }

  subgraph CoreSubscriber_public_methods {
    label = "CoreSubscriber public methods";
    node [style=filled, color=red];

    CoreSubscriber_init [label = "init"];
  }

  subgraph DefaultSubscriber_public_methods {
    label = "DefaultSubscriber public methods";
    node [style=filled, color=pink];

    DefaultSubscriber_init [label = "init"];
    start;
    resolutionPreference;
    stop;
  }

  subgraph CoreSubscriber_SubscriberInteractor {
    label = "CoreSubscriberâ€™s implementation of SubscriberInteractor"
    node [style=filled, color=purple, fontcolor=white];

    notifyAssetIsOffline;
    subscribeForChannelState;
    subscribeForEnhancedEvents;
    subscribeForRawEvents;
  }

  // Workers posted by workers

  ProcessInitialPresenceMessages -> SubscribeToChannel;

  StartConnection -> SubscribeForPresenceMessages;

  SubscribeForPresenceMessages -> Disconnect;
  SubscribeForPresenceMessages -> ProcessInitialPresenceMessages;

  // Ably wrapper methods called by workers

  ChangeResolution -> updatePresenceData;

  Disconnect -> disconnect;

  StartConnection -> connect;
  StartConnection -> enterChannelPresence;
  StartConnection -> startConnection;

  StopConnection -> close;

  SubscribeForPresenceMessages -> getCurrentPresence;
  SubscribeForPresenceMessages -> subscribeForPresenceMessages;

  // SubscriberInteractor methods called by workers

  StopConnection -> notifyAssetIsOffline;

  SubscribeToChannel -> subscribeForChannelState;
  SubscribeToChannel -> subscribeForEnhancedEvents;
  SubscribeToChannel -> subscribeForRawEvents;

  // DefaultSubscriber called methods

  DefaultSubscriber_init -> CoreSubscriber_init;

  // DefaultSubscriber enqueued workers (by calling core.enqueue)

  start -> StartConnection;
  resolutionPreference -> ChangeResolution;
  stop -> StopConnection;

  // Ably wrapper methods called by CoreSubscriber

  CoreSubscriber_init -> subscribeForAblyStateChange;
  subscribeForChannelState -> subscribeForChannelStateChange;
  subscribeForEnhancedEvents -> ably_subscribeForEnhancedEvents;
  subscribeForRawEvents -> ably_subscribeForRawEvents;

  // Methods that pass listeners

  SubscribeForPresenceMessages -> listener_SubscribeForPresenceMessages__subscribeForPresenceMessages [label = "passes", style = "dashed"];
  CoreSubscriber_init -> listener_CoreSubscriber_init__subscribeForAblyStateChange [label = "passes", style = "dashed"];
  subscribeForChannelState -> listener_subscribeForChannelState__subscribeForChannelStateChange [label = "passes", style = "dashed"];

  // Methods that call listeners

  subscribeForPresenceMessages -> listener_SubscribeForPresenceMessages__subscribeForPresenceMessages;
  subscribeForAblyStateChange -> listener_CoreSubscriber_init__subscribeForAblyStateChange;
  subscribeForChannelStateChange -> listener_subscribeForChannelState__subscribeForChannelStateChange;

  // Actions performed in listeners

  listener_SubscribeForPresenceMessages__subscribeForPresenceMessages -> UpdatePublisherPresence;
  listener_CoreSubscriber_init__subscribeForAblyStateChange -> UpdateConnectionState
  listener_subscribeForChannelState__subscribeForChannelStateChange -> UpdateChannelConnectionState
}
